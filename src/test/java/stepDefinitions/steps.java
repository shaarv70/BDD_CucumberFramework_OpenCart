package stepDefinitions;
//we can have multiple files of steps.java but make sure we should not have duplicate methods in those classes 

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;
import java.util.ResourceBundle;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.*;
import pageObjects.HomePage;
import pageObjects.LoginPage;
/* This file has been generated by running the feature file, automatically methods will be generated based on the steps in feature file*/
import pageObjects.MyAccountPage;
import utilities.DataReader;

public class steps 
{   
	WebDriver driver;
	Logger logger;
	ResourceBundle rb;
	String br;
	HomePage hp;
	LoginPage lp;
	MyAccountPage acc;
	List<HashMap<String, String>> datamap;
	


	@Before                           //@Before- it executes this method before every scenario
	public void setup() throws IOException
	{
		rb=ResourceBundle.getBundle("config");//approach1 for reading config file
		br=rb.getString("browser");
		logger= LogManager.getLogger(this.getClass());
		
	/*	//approach2 for reading config file
		File src =new File(".\\resources\\config.properties");
	    FileInputStream fis=new FileInputStream(src);
	    Properties pro= new Properties();
	    pro.load(fis);
	    br=pro.getProperty("browser");*/
	}
	
	@After                              //@After- it executes this method after every scenario
	 public void tearDown(Scenario scenario)//Scenario is predefined class
	{
		 System.out.println("Scenario status ======>"+scenario.getStatus());
		 
		 if(scenario.isFailed())
		 {
			 TakesScreenshot ts= (TakesScreenshot)driver;
			 byte[] screenshot=ts .getScreenshotAs(OutputType.BYTES);
		      scenario.attach(screenshot,"image/png", scenario.getName()); //here the second argument is MIME type
		 
		 }
		driver.close();
	}


    @Given("User launch browser")
	public void user_launch_browser() 
	{
		if(br.equals("Chrome"))
		{
			driver=new ChromeDriver();
		}

		if(br.equals("firefox"))
		{
			driver=new FirefoxDriver();
		}

		if(br.equals("Edge"))
		{
			driver=new EdgeDriver();
		}
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

	}

	@Given("opens URL\\({string})")// whatever in the feauture file is passed with "" that will passed as parameters in defintion
	public void opens_url(String url) 
	{
           driver.get(url);
           driver.manage().window().maximize();
	}

	@When("User navigate to MyAccount menu")
	public void user_navigate_to_my_account_menu() 
	{
            hp= new HomePage(driver);
            hp.clickMyAccount();
           logger.info("Clicked on MyAccount menu");
	}

	@When("click on Login")
	public void click_on_login()
	{
		hp.clickLogin();
		logger.info("Clicked on login option");
       
	}

	@When("enter Emails as:{string} and Password as {string}")
	public void enter_emails_as_and_password_as(String string, String string2) 
	{  
		 lp= new LoginPage(driver);
		 lp.setEmail(string);
		 lp.setPassword(string2);
      logger.info("Entered email and password" );
	}

	@When("click on Login button")
	public void click_on_login_button()
	{
          lp.clickLogin();
          logger.info("Clicked on login button");
	}

	@Then("user navigates to myAccount Page")
	public void user_navigates_to_my_account_page() 
	{
		    acc=new MyAccountPage(driver);
            boolean target =acc.isMyAccountPageExists();
             if(target==true)
             {
            	 Assert.assertTrue(true);
            	 logger.info("Login is success");
             }
	
             else 
             {
            	 logger.error("Login is failed");
                 Assert.assertTrue(false);
             }
               	
	}
	
	
	
	// Data Driven Excel test method
	
	@Then("user navigates to MyAccount Page by passing Email and Password with excel row {string}")
	public void user_navigates_to_my_account_page_by_passing_email_and_password_with_excel_row(String rows) 
	{
		//  acc=new MyAccountPage(driver);
		//datamap is not a local variable, its a datadump where we are dumping the value from DataReader class   
		datamap = DataReader.data(System.getProperty("user.dir")+"\\testData\\Opencart_LoginData.xlsx", "Sheet1");

	        int index=Integer.parseInt(rows)-1;
	        /*In hashmap data "username","password","res" are the keys and the corresponding value at that particular row which we are sending
	         as an argument is the value of that key */
	        String email= datamap.get(index).get("username");   
	        String pwd= datamap.get(index).get("password");        
	        String exp_res= datamap.get(index).get("res");

	        lp=new LoginPage(driver);
	        lp.setEmail(email);
	        lp.setPassword(pwd);

	        lp.clickLogin();
	       
	            boolean targetpage= acc.isMyAccountPageExists();

	            try
	            {
	            	if(exp_res.equals("Valid"))
	            
	            {
	                if(targetpage==true)
	                {
	                   
	                    acc.clickLogout();
	                    Assert.assertTrue(true);
	                }
	                else
	                {
	                    Assert.assertTrue(false);
	                }
	            }

	            if(exp_res.equals("Invalid"))
	            {
	                if(targetpage==true)
	                {
	                    acc.clickLogout();
	                    Assert.assertTrue(false);
	                }
	                else
	                {
	                    Assert.assertTrue(true);
	                }
	            }
	}
   catch (Exception e)
	            {
	                  Assert.assertTrue(false);
	            }
}}

	
	




